Metadata-Version: 2.4
Name: paymover
Version: 1.0.0
Summary: Python API client for Paymo project management service
Home-page: https://github.com/paymover/paymover
Author: PayMover Team
Author-email: team@paymover.com
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Office/Business :: Scheduling
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: requests>=2.28.0
Requires-Dist: urllib3>=1.26.0
Requires-Dist: typing-extensions>=4.0.0
Requires-Dist: dataclasses-json>=0.5.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: flake8>=5.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license-file
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# PayMover

A modern, type-safe Python API client for the Paymo project management service, built using interfaces and adapters following best practices.

## Features

- üèóÔ∏è **Clean Architecture**: Built with interfaces and adapters for maximum flexibility and testability
- üîê **Multiple Authentication**: Support for basic auth (email/password) and API keys
- üöÄ **Type Safety**: Full type hints and mypy support
- üîÑ **Rate Limiting**: Built-in rate limit handling with automatic retries
- üìä **Comprehensive Coverage**: Support for projects, clients, tasks, time entries, and more
- üõ†Ô∏è **Extensible**: Easy to extend with custom HTTP clients, auth providers, and handlers
- üìù **CLI Support**: Command-line interface for quick operations
- ‚öôÔ∏è **Configuration**: Flexible configuration via environment variables or files

## Installation

```bash
pip install paymover
```

## Quick Start

### Basic Usage

```python
from paymover import create_client

# Create a client with your Paymo credentials
client = create_client("your-email@example.com", "your-password")

# List all projects
projects = client.projects.list()
print(f"Found {len(projects)} projects")

# Create a new project
new_project = client.projects.create(
    name="My New Project",
    description="A project created with PayMover",
    client_id=123
)
print(f"Created project: {new_project['name']}")
```

### Using Environment Variables

```bash
export PAYMO_EMAIL="your-email@example.com"
export PAYMO_PASSWORD="your-password"
```

```python
from paymover import create_client

# Client will automatically use environment variables
client = create_client()
```

### Command Line Interface

```bash
# List projects
paymover projects list --email user@example.com --password secret

# Create a project
paymover project create --email user@example.com --password secret --name "New Project"

# List tasks for a specific project
paymover tasks list --email user@example.com --password secret --project-id 123
```

## Architecture

PayMover is built using the **Interface Segregation Principle** and **Dependency Inversion Principle**, making it highly testable and extensible:

### Core Interfaces

- `HTTPClient`: Abstract interface for HTTP operations
- `AuthenticationProvider`: Abstract interface for authentication
- `RateLimitHandler`: Abstract interface for rate limit handling
- `Logger`: Abstract interface for logging

### Adapters

- `RequestsHTTPClient`: HTTP client using the requests library
- `BasicAuthProvider`: Email/password authentication
- `APIKeyAuthProvider`: API key authentication
- `DefaultRateLimitHandler`: Standard rate limit handling
- `StandardLogger`: Python logging integration

## Advanced Usage

### Custom HTTP Client

```python
from paymover.interfaces import HTTPClient, HTTPResponse
from paymover.factory import create_custom_client
from paymover.adapters import BasicAuthProvider

class CustomHTTPClient(HTTPClient):
    def get(self, url, headers=None, params=None, timeout=None):
        # Your custom implementation
        pass
    # ... implement other methods

# Use your custom client
client = create_custom_client(
    http_client=CustomHTTPClient(),
    auth_provider=BasicAuthProvider("email", "password")
)
```

### Custom Authentication

```python
from paymover.interfaces import AuthenticationProvider

class OAuthProvider(AuthenticationProvider):
    def get_headers(self):
        return {"Authorization": f"Bearer {self.access_token}"}
    
    def get_auth_tuple(self):
        return None

# Use OAuth authentication
client = create_custom_client(
    http_client=RequestsHTTPClient(),
    auth_provider=OAuthProvider("your-access-token")
)
```

### Configuration Management

```python
from paymover.config import PaymoConfig

# Load from environment
config = PaymoConfig.from_env()

# Load from file
config = PaymoConfig.from_file("config.json")

# Create client with config
client = create_client(
    email=config.email,
    password=config.password,
    base_url=config.base_url,
    timeout=config.timeout
)
```

## API Reference

### Projects

```python
# List projects
projects = client.projects.list()

# Get specific project
project = client.projects.get(project_id=123)

# Create project
project = client.projects.create(
    name="New Project",
    description="Project description",
    client_id=456,
    budget=10000.0
)

# Update project
updated_project = client.projects.update(
    project_id=123,
    name="Updated Name",
    budget=15000.0
)

# Delete project
success = client.projects.delete(project_id=123)
```

### Clients

```python
# List clients
clients = client.clients.list()

# Create client
client_obj = client.clients.create(
    name="New Client",
    email="client@example.com",
    phone="+1234567890"
)
```

### Tasks

```python
# List tasks
tasks = client.tasks.list()

# List tasks for specific project
project_tasks = client.tasks.list(project_id=123)

# Create task
task = client.tasks.create(
    name="New Task",
    project_id=123,
    description="Task description",
    due_date="2024-12-31"
)
```

### Time Entries

```python
# List time entries
entries = client.time_entries.list()

# Create time entry
entry = client.time_entries.create(
    project_id=123,
    task_id=456,
    start_time="2024-01-01 09:00:00",
    end_time="2024-01-01 17:00:00",
    description="Working on project"
)
```

## Error Handling

PayMover provides specific exception types for different error scenarios:

```python
from paymover.exceptions import (
    PaymoAPIError,
    PaymoAuthenticationError,
    PaymoRateLimitError,
    PaymoValidationError,
    PaymoNotFoundError,
    PaymoServerError
)

try:
    project = client.projects.get(999999)
except PaymoNotFoundError:
    print("Project not found")
except PaymoAuthenticationError:
    print("Authentication failed")
except PaymoRateLimitError as e:
    print(f"Rate limited. Retry after {e.retry_after} seconds")
except PaymoAPIError as e:
    print(f"API error: {e.message}")
```

## Rate Limiting

PayMover automatically handles rate limiting:

- Detects 429 responses
- Extracts retry delay from headers
- Implements exponential backoff
- Respects rate limit headers

## Testing

```python
from unittest.mock import Mock
from paymover.interfaces import HTTPClient, HTTPResponse

# Mock HTTP client for testing
mock_client = Mock(spec=HTTPClient)
mock_response = HTTPResponse(
    status_code=200,
    headers={},
    data={"id": 1, "name": "Test Project"},
    url="https://api.example.com/projects/1"
)
mock_client.get.return_value = mock_response

# Use mock in your tests
client = create_custom_client(
    http_client=mock_client,
    auth_provider=BasicAuthProvider("test", "test")
)
```

## Development

### Setup

```bash
git clone https://github.com/your-org/paymover.git
cd paymover
pip install -e ".[dev]"
```

### Running Tests

```bash
pytest
```

### Code Formatting

```bash
black paymover/
flake8 paymover/
mypy paymover/
```

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests
5. Run the test suite
6. Submit a pull request

## License

MIT License - see LICENSE file for details.

## Support

- üìñ [Documentation](https://paymover.readthedocs.io)
- üêõ [Issue Tracker](https://github.com/your-org/paymover/issues)
- üí¨ [Discussions](https://github.com/your-org/paymover/discussions)

## Changelog

### 1.0.0
- Initial release
- Full Paymo API coverage
- Interface-based architecture
- CLI support
- Comprehensive documentation
